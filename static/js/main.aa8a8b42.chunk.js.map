{"version":3,"sources":["assets/images/animeCharacters.jpg","components/Card.js","containers/Anime.js","containers/About.js","containers/Quotes.js","containers/Manga.js","components/AnimeInfo.js","components/MangaInfo.js","components/ResponsiveDrawer.js","assets/theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","width","height","AnimeCard","props","classes","anime","Card","component","className","CardActionArea","onClick","onCardClick","mal_id","CardMedia","alt","title","image","image_url","CardContent","Typography","gutterBottom","variant","align","theme","dropDown","Home","useState","recommendations","setRecommendations","animeId","setAnimeId","loading","setLoading","animeList","setAnimeList","animeText","setAnimeText","open","setOpen","useEffect","getRecommendations","onClickAnime","history","push","handleClose","getList","text","a","fetch","then","response","json","res","results","slice","CircularProgress","size","thickness","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","color","autoFocus","Grid","container","item","xs","Autocomplete","options","value","onChange","event","newValue","onInputChange","reason","length","getOptionLabel","option","renderInput","params","TextField","label","IconButton","undefined","spacing","style","marginTop","map","sm","md","fontSize","margin","fontWeight","fontFamily","textShadow","breakpoints","up","down","About","src","require","padding","Quotes","quote","setQuote","addQuotes","getQuote","concat","data","index","key","character","Divider","fullWidth","Manga","mangaId","setMangaId","mangaList","setMangaList","mangaText","setMangaText","onClickManga","console","log","card","cardImage","synopsis","letterSpacing","AnimeInfo","setAnimeInfo","getAnimeInfo","match","english_title","title_english","elevation","type","episodes","status","aired","string","premiered","broadcast","producers","name","studios","score","rank","popularity","members","favorites","MangaInfo","manga","setMangaInfo","authors","genres","volumes","chapters","published","display","link","textDecoration","linkActive","background","drawer","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","flexGrow","menuArr","icon","path","ResponsiveDrawer","window","useTheme","React","mobileOpen","setMobileOpen","handleDrawerToggle","List","to","exact","activeClassName","ListItem","button","ListItemIcon","ListItemText","primary","document","body","CssBaseline","AppBar","position","Toolbar","aria-label","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","paper","ModalProps","keepMounted","xsDown","Anime","DarkTheme","createMuiTheme","palette","App","ThemeProvider","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa8a8b42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/animeCharacters.b649fef9.jpg\";","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { CardActionArea } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 250,\r\n    height: 310,\r\n  },\r\n});\r\n\r\nexport default function AnimeCard(props) {\r\n  const classes = useStyles();\r\n  const { anime } = props;\r\n  return (\r\n    <Card component=\"button\" className={classes.root}>\r\n      <CardActionArea onClick={() => props.onCardClick(anime.mal_id)}>\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt={props.title}\r\n          height=\"220\"\r\n          image={anime.image_url}\r\n          title={anime.title}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" align=\"center\">\r\n            {anime.title}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n","import {\r\n  CircularProgress,\r\n  Grid,\r\n  TextField,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  DialogContentText,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport AnimeCard from \"../components/Card\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  dropDown: {\r\n    width: \"100%\",\r\n    height: \"2rem\",\r\n  },\r\n}));\r\n\r\nconst Home = (props) => {\r\n  const classes = useStyles();\r\n  const [recommendations, setRecommendations] = useState([]);\r\n  const [animeId, setAnimeId] = useState(-1);\r\n  const [loading, setLoading] = useState(true);\r\n  const [animeList, setAnimeList] = useState([]);\r\n  const [animeText, setAnimeText] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n  useEffect(() => {\r\n    getRecommendations();\r\n  }, []);\r\n\r\n  const onClickAnime = (mal_id) => {\r\n    props.history.push(`/animeInfo/${mal_id}`);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const getList = async (text) => {\r\n    await fetch(\r\n      `https://api.jikan.moe/v3/search/anime?q=${text}&page=1&limit=20`\r\n    ).then(async (response) => {\r\n      const res = await response.json();\r\n      setAnimeList(res.results);\r\n    });\r\n  };\r\n  const getRecommendations = async () => {\r\n    setLoading(true);\r\n    await fetch(\"https://api.jikan.moe/v3/anime/1/recommendations\").then(\r\n      async (response) => {\r\n        const res = await response.json();\r\n        setRecommendations(res.recommendations.slice());\r\n      }\r\n    );\r\n    setLoading(false);\r\n  };\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <CircularProgress size={80} thickness={5} />\r\n      ) : (\r\n        <div>\r\n          <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\">\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n              {\"No Anime Selected!\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-description\">\r\n                Please select an anime first.\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                Okay\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n          <Grid container>\r\n            <Grid item xs={10}>\r\n              <Autocomplete\r\n                id=\"combo-box-demo\"\r\n                className={classes.dropDown}\r\n                options={animeList}\r\n                value={animeText}\r\n                onChange={(event, newValue) => {\r\n                  setAnimeText(newValue);\r\n                }}\r\n                onInputChange={(event, value, reason) => {\r\n                  if (value.length > 2) {\r\n                    getList(value);\r\n                  }\r\n                }}\r\n                getOptionLabel={(option) => {\r\n                  setAnimeId(option.mal_id);\r\n                  return option.title;\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Search Anime\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <IconButton\r\n                onClick={() => {\r\n                  if (animeId !== undefined) {\r\n                    onClickAnime(animeId);\r\n                  } else {\r\n                    handleClickOpen();\r\n                  }\r\n                }}>\r\n                <SearchIcon></SearchIcon>\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={2} style={{ marginTop: \"1rem\" }}>\r\n            {recommendations.map((item) => (\r\n              <Grid item xs={12} sm={4} md={3}>\r\n                <AnimeCard anime={item} onCardClick={onClickAnime} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontSize: \"4rem\",\r\n    margin: \"1.5rem auto 1rem\",\r\n    fontWeight: \"500\",\r\n    fontFamily: \"Patrick Hand\",\r\n    textShadow: \"0 0 10px #ff0, 0 0 50px #ff0\",\r\n  },\r\n  image: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      height: 400,\r\n      width: 600,\r\n    },\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      height: 200,\r\n      width: 300,\r\n    },\r\n  },\r\n}));\r\n\r\nconst About = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <img\r\n        src={require(\"../assets/images/animeCharacters.jpg\")}\r\n        className={classes.image}\r\n      />\r\n      <Typography variant=\"h2\" className={classes.title}>\r\n        ANIME 4 LIFE\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\">Developer: Sourabh Hande</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  Divider,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    padding: \"1rem\",\r\n  },\r\n  title: {\r\n    fontFamily: \"Patrick Hand\",\r\n  },\r\n}));\r\n\r\nconst Quotes = (props) => {\r\n  const classes = useStyles();\r\n  const [quote, setQuote] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    addQuotes();\r\n  }, []);\r\n\r\n  const getQuote = async () => {\r\n    await fetch(\"https://animechanapi.xyz/api/quotes/random\").then(\r\n      async (response) => {\r\n        const res = await response.json();\r\n        setQuote((quote) => quote.concat(res.data[0]));\r\n      }\r\n    );\r\n  };\r\n\r\n  const addQuotes = async () => {\r\n    setLoading(true);\r\n    setQuote([]);\r\n    for (let index = 0; index < 5; index++) {\r\n      await getQuote();\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {loading ? (\r\n        <CircularProgress size={80} thickness={5} />\r\n      ) : (\r\n        quote.map((item) => (\r\n          <div key={item.anime}>\r\n            <Typography variant=\"h5\" className={classes.title}>\r\n              {item.quote}\r\n            </Typography>\r\n            <Typography variant=\"h6\" align=\"right\">\r\n              -{item.character}\r\n            </Typography>\r\n            <Divider style={{ margin: \"1rem auto\" }}></Divider>\r\n          </div>\r\n        ))\r\n      )}\r\n      {loading ? null : (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          fullWidth\r\n          size=\"large\"\r\n          onClick={addQuotes}>\r\n          View New Quotes\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quotes;\r\n","import {\r\n  CircularProgress,\r\n  Grid,\r\n  TextField,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  DialogContentText,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Card from \"../components/Card\";\r\nimport { makeStyles, fade } from \"@material-ui/core/styles\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  dropDown: {\r\n    width: \"100%\",\r\n    height: \"2rem\",\r\n  },\r\n}));\r\n\r\nconst Manga = (props) => {\r\n  const classes = useStyles();\r\n  const [recommendations, setRecommendations] = useState([]);\r\n  const [mangaId, setMangaId] = useState(-1);\r\n  const [loading, setLoading] = useState(true);\r\n  const [mangaList, setMangaList] = useState([]);\r\n  const [mangaText, setMangaText] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n  useEffect(() => {\r\n    getRecommendations();\r\n  }, []);\r\n  const onClickManga = (mal_id) => {\r\n    props.history.push(`/mangaInfo/${mal_id}`);\r\n  };\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const getList = async (text) => {\r\n    await fetch(\r\n      `https://api.jikan.moe/v3/search/manga?q=${text}&page=1&limit=20`\r\n    ).then(async (response) => {\r\n      const res = await response.json();\r\n      setMangaList(res.results);\r\n    });\r\n  };\r\n  const getRecommendations = async () => {\r\n    setLoading(true);\r\n    await fetch(\"https://api.jikan.moe/v3/manga/1/recommendations\").then(\r\n      async (response) => {\r\n        const res = await response.json();\r\n        setRecommendations(res.recommendations.slice());\r\n      }\r\n    );\r\n    setLoading(false);\r\n  };\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <CircularProgress size={80} thickness={5} />\r\n      ) : (\r\n        <div>\r\n          <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\">\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n              {\"No Manga Selected!\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-description\">\r\n                Please select a manga first.\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                Okay\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n          <Grid container>\r\n            <Grid item xs={10}>\r\n              <Autocomplete\r\n                id=\"combo-box-demo\"\r\n                className={classes.dropDown}\r\n                options={mangaList}\r\n                value={mangaText}\r\n                onChange={(event, newValue) => {\r\n                  setMangaText(newValue);\r\n                }}\r\n                onInputChange={(event, value, reason) => {\r\n                  console.log(value);\r\n                  if (value.length > 2) {\r\n                    getList(value);\r\n                  }\r\n                }}\r\n                getOptionLabel={(option) => {\r\n                  setMangaId(option.mal_id);\r\n                  return option.title;\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Search Manga\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <IconButton\r\n                onClick={() => {\r\n                  if (mangaId !== undefined) {\r\n                    onClickManga(mangaId);\r\n                  } else {\r\n                    handleClickOpen();\r\n                  }\r\n                }}>\r\n                <SearchIcon></SearchIcon>\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={2} style={{ marginTop: \"1rem\" }}>\r\n            {recommendations.map((item) => (\r\n              <Grid item xs={12} sm={4} md={3}>\r\n                <Card anime={item} onCardClick={onClickManga} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Manga;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CircularProgress,\r\n  Grid,\r\n  CardMedia,\r\n  Card,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    padding: \"1rem\",\r\n    margin: \"1rem 0\",\r\n  },\r\n  cardImage: {\r\n    margin: \"1rem\",\r\n  },\r\n  title: {\r\n    fontFamily: \"Acme\",\r\n  },\r\n  synopsis: {\r\n    letterSpacing: 2,\r\n  },\r\n});\r\n\r\nconst AnimeInfo = (props) => {\r\n  const classes = useStyles();\r\n  const [anime, setAnimeInfo] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    getAnimeInfo();\r\n  }, []);\r\n  const getAnimeInfo = async () => {\r\n    setLoading(true);\r\n    await fetch(`https://api.jikan.moe/v3/anime/${props.match.params.id}`).then(\r\n      async (response) => {\r\n        const res = await response.json();\r\n        setAnimeInfo(res);\r\n      }\r\n    );\r\n    setLoading(false);\r\n  };\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <CircularProgress size={80} thickness={5} />\r\n      ) : (\r\n        <div>\r\n          <Card className={classes.card}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={3}>\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  alt={anime.english_title}\r\n                  height=\"90%\"\r\n                  image={anime.image_url}\r\n                  title={anime.english_title}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={9}>\r\n                <Typography variant=\"h4\" className={classes.title}>\r\n                  {anime.title_english}\r\n                </Typography>\r\n                <Divider style={{ margin: \"1rem auto\" }}></Divider>\r\n                <Typography\r\n                  component=\"p\"\r\n                  align=\"left\"\r\n                  className={classes.synopsis}>\r\n                  {anime.synopsis}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Card>\r\n          <Card elevation={20} className={classes.card}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={5}>\r\n                <Typography variant=\"h6\" align=\"left\">\r\n                  Information\r\n                </Typography>\r\n                <Divider></Divider>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Type : {anime.type}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Episodes : {anime.episodes}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Status : {anime.status}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Aired : {anime.aired.string}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Premiered : {anime.premiered}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Broadcast : {anime.broadcast}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Producers : {anime.producers.map((item) => item.name + \", \")}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Studios : {anime.studios.map((item) => item.name + \", \")}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sm={5}>\r\n                <Typography variant=\"h6\" align=\"left\">\r\n                  Statistics\r\n                </Typography>\r\n                <Divider></Divider>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Score : {anime.score}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Rank : #{anime.rank}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Popularity : #{anime.popularity}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Members : {anime.members}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Favorites : {anime.favorites}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnimeInfo;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CircularProgress,\r\n  Grid,\r\n  CardMedia,\r\n  Card,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    padding: \"1rem\",\r\n    margin: \"1rem 0\",\r\n  },\r\n  cardImage: {\r\n    margin: \"1rem\",\r\n  },\r\n  title: {\r\n    fontFamily: \"Acme\",\r\n  },\r\n  synopsis: {\r\n    letterSpacing: 2,\r\n  },\r\n});\r\n\r\nconst MangaInfo = (props) => {\r\n  const classes = useStyles();\r\n  const [manga, setMangaInfo] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    getAnimeInfo();\r\n  }, []);\r\n  const getAnimeInfo = async () => {\r\n    setLoading(true);\r\n    await fetch(`https://api.jikan.moe/v3/manga/${props.match.params.id}`).then(\r\n      async (response) => {\r\n        const res = await response.json();\r\n        setMangaInfo(res);\r\n      }\r\n    );\r\n    setLoading(false);\r\n  };\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <CircularProgress size={80} thickness={5} />\r\n      ) : (\r\n        <div>\r\n          <Card className={classes.card}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={3}>\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  alt={manga.english_title}\r\n                  height=\"90%\"\r\n                  image={manga.image_url}\r\n                  title={manga.english_title}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={9}>\r\n                <Typography variant=\"h4\" className={classes.title}>\r\n                  {manga.title_english}\r\n                </Typography>\r\n                <Divider style={{ margin: \"1rem auto\" }}></Divider>\r\n                <Typography\r\n                  component=\"p\"\r\n                  align=\"left\"\r\n                  className={classes.synopsis}>\r\n                  {manga.synopsis}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Card>\r\n          <Card elevation={20} className={classes.card}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={5}>\r\n                <Typography variant=\"h6\" align=\"left\">\r\n                  Information\r\n                </Typography>\r\n                <Divider></Divider>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Authors : {manga.authors.map((item) => item.name + \", \")}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Genres : {manga.genres.map((item) => item.name + \", \")}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Type : {manga.type}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Volumes : {manga.volumes}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Chapters : {manga.chapters}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Published : {manga.published.string}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sm={5}>\r\n                <Typography variant=\"h6\" align=\"left\">\r\n                  Statistics\r\n                </Typography>\r\n                <Divider></Divider>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Rating : {manga.score}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Rank : #{manga.rank}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Popularity : #{manga.popularity}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Members : {manga.members}\r\n                </Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\">\r\n                  Favorites : {manga.favorites}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MangaInfo;\r\n","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport TvIcon from \"@material-ui/icons/Tv\";\r\nimport Anime from \"../containers/Anime\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport About from \"../containers/About\";\r\nimport FormatQuoteIcon from \"@material-ui/icons/FormatQuote\";\r\nimport Quotes from \"../containers/Quotes\";\r\nimport Manga from \"../containers/Manga\";\r\nimport BookIcon from \"@material-ui/icons/Book\";\r\nimport AnimeInfo from \"./AnimeInfo\";\r\nimport MangaInfo from \"./MangaInfo\";\r\nimport { NavLink, Redirect, Route, Switch } from \"react-router-dom\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  title: {\r\n    fontFamily: \"Patrick Hand\",\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n    color: \"#fff\",\r\n  },\r\n  linkActive: {\r\n    textDecoration: \"none\",\r\n    color: \"#fff\",\r\n    background: \"rgba(255,255,255,0.3)\",\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst menuArr = [\r\n  {\r\n    title: \"Anime\",\r\n    icon: <TvIcon></TvIcon>,\r\n    path: \"/anime\",\r\n  },\r\n  {\r\n    title: \"Manga\",\r\n    icon: <BookIcon></BookIcon>,\r\n    path: \"/manga\",\r\n  },\r\n  {\r\n    title: \"Quotes\",\r\n    icon: <FormatQuoteIcon></FormatQuoteIcon>,\r\n    path: \"/quotes\",\r\n  },\r\n  {\r\n    title: \"About\",\r\n    icon: <InfoIcon></InfoIcon>,\r\n    path: \"/about\",\r\n  },\r\n];\r\n\r\nfunction ResponsiveDrawer(props) {\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        {menuArr.map((item, index) => (\r\n          <NavLink\r\n            to={item.path}\r\n            key={item.title}\r\n            exact\r\n            activeClassName={classes.linkActive}\r\n            className={classes.link}>\r\n            <ListItem button>\r\n              <ListItemIcon>{item.icon}</ListItemIcon>\r\n              <ListItemText primary={item.title} />\r\n            </ListItem>\r\n          </NavLink>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  const container =\r\n    window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}>\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\" className={classes.title} noWrap>\r\n            Anime 4 Life\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}>\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open>\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <Switch>\r\n          <Route path=\"/anime\" exact component={Anime}></Route>\r\n          <Route path=\"/manga\" exact component={Manga}></Route>\r\n          <Route path=\"/about\" exact component={About}></Route>\r\n          <Route path=\"/quotes\" exact component={Quotes}></Route>\r\n          <Route path=\"/animeInfo/:id\" exact component={AnimeInfo}></Route>\r\n          <Route path=\"/mangaInfo/:id\" exact component={MangaInfo}></Route>\r\n          <Redirect to=\"/anime\"></Redirect>\r\n        </Switch>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResponsiveDrawer;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nexport const DarkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n});\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ResponsiveDrawer from \"./components/ResponsiveDrawer\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { DarkTheme } from \"./assets/theme\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={DarkTheme}>\n        <BrowserRouter>\n          <ResponsiveDrawer></ResponsiveDrawer>\n        </BrowserRouter>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}